generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  email             String     @unique
  name              String?
  password          String
  role              String     @default("user") // Role can be "user", "admin", or "business_rep"
  managedResourceId String?    @db.ObjectId // Resource ID that a business representative manages
  isActive          Boolean    @default(true) // Added isActive field to control account status
  isEmailVerified   Boolean    @default(false) // Whether the email has been verified
  otpSecret         String?    // Secret for OTP generation
  otpExpiry         DateTime?  // When the OTP expires
  // User demographic data
  ageGroup          String?    // Age group: 16-18, 18-24, 25-30, 30-45, 45+
  raceEthnicity     String?    // Race/ethnicity: Hispanic, Black, Latine, etc.
  gender            String?    // Gender: cis/trans and female/male
  pronoun1          String?    // First pronoun (e.g., he, she, they)
  pronoun2          String?    // Second pronoun (e.g., him, her, them)
  sexualOrientation String?    // Sexual orientation: questioning, lesbian, gay, etc.
  incomeBracket     String?    // Income bracket in standard IRS ranges
  livingSituation   String?    // Living situation: apartment, house, homeless
  livingArrangement String?    // Living arrangement: with family, alone
  zipcode           String?    // User's zipcode for geographic data
  state             String?    // State derived from zipcode (can be populated by backend)
  resourceInterests String[]   // Array of resource interests
  favorites         Favorite[] // One-to-many relationship with Favorite
  likes             Like[]     // One-to-many relationship with Like
  ratings           Rating[]   // One-to-many relationship with Rating
  reviews           Review[]   // One-to-many relationship with Review
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Resource {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  category       String[] // Array to handle multiple categories
  contact        Json // JSON for contact details (phone, email, website)
  address        Json // JSON for structured address (street, city, state)
  operatingHours Json // JSON for operating hours (per day schedule)
  favoriteCount  Int      @default(0) // Integer for count of favorites
  upvoteCount    Int? // Nullable field for upvote count
  verified       Boolean  @default(false) // Whether the resource is verified
  profilePhoto   Bytes?   // Binary data for the profile photo
  profilePhotoType String? // MIME type of the profile photo
  bannerImage    Bytes?   // Binary data for the banner image
  bannerImageType String? // MIME type of the banner image
  profilePhotoUrl String? // URL to the profile photo
  bannerImageUrl  String? // URL to the banner image
  createdAt      DateTime @default(now()) @map("createdAt") // Timestamp for creation
  updatedAt      DateTime @updatedAt @map("updatedAt") // Timestamp for updates
  Like           Like[]
  Rating         Rating[]
  Review         Review[]
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  resourceId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, resourceId]) // Ensure a user can't favorite the same resource twice
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  resourceId String   @db.ObjectId
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  Resource   Resource @relation(fields: [resourceId], references: [id])
}

model Rating {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  resourceId String   @db.ObjectId
  rating     Int // Rating value (e.g., 1â€“5)
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  Resource   Resource @relation(fields: [resourceId], references: [id])

  @@unique([userId, resourceId]) // Ensure a user can rate a resource only once
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  resourceId String   @db.ObjectId
  content    String   @db.String // Review text content
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User     @relation(fields: [userId], references: [id])
  Resource   Resource @relation(fields: [resourceId], references: [id])
}

model ResourceRecommendation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Name of the recommended resource
  type        String   // "state" or "national"
  state       String?  // State name if type is "state"
  description String   @db.String // Description of what the resource offers
  category    String[] // Array of categories the resource belongs to
  note        String   @db.String // Note about why they are recommending this resource
  contact     Json     // Contact information (phone, email, website)
  address     Json     // Address information (street, city, state, zip)
  status      String   @default("pending") // Status of the recommendation: pending, approved, rejected
  submittedBy String?  // Optional name of the person who submitted the recommendation
  email       String?  // Optional email of the person who submitted the recommendation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
